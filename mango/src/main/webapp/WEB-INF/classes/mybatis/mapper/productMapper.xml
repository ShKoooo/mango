<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">
	
	<select id="seq" resultType="Integer">
		SELECT product_seq.NEXTVAL FROM dual
	</select>
	
	<!-- 글 개수 -->
	<select id="dataCount" resultType="Integer" parameterType="map">
		SELECT NVL(COUNT(*), 0)
		FROM product p
		JOIN area a ON p.areaNum = a.areaNum
		JOIN member m ON p.userId = m.userId
		<!-- 관심 키워드 조건 -->
    	LEFT OUTER JOIN (
			SELECT USERID,  LISTAGG(KEYWORD, '|')  WITHIN GROUP(ORDER BY USERID) AS KEYWORD
			FROM KEYWORD
			GROUP BY USERID
		)K ON K.USERID = #{userId} <!-- 접속 유저 ID -->
		<!-- 차단 유저 조건 -->
		LEFT OUTER JOIN (
			SELECT USERID, LISTAGG(TARGET_ID, '|')  WITHIN GROUP(ORDER BY USERID) AS BLOCKEDID
			FROM BLOCKEDUSER
			GROUP BY USERID
		)BLOCKED ON BLOCKED.USERID = #{userId} <!-- 접속 유저 ID -->
			
		WHERE	CASE WHEN #{pcNum} = 0 THEN 1
	                 WHEN p.pcNum = #{pcNum} THEN 1
	            ELSE 0 END = 1
		<if test="info == true">
			<if test="membership &lt; 51">
				AND p.areaNum IN (
					SELECT areaNum
					FROM (
						SELECT * FROM (
							SELECT areaNum,
								(6371*acos(ROUND(cos(#{maLat}*3.14159265358979/180)*cos(aLat*3.14159265358979/180)*cos(aLon*3.14159265358979/180
                              -#{maLon}*3.14159265358979/180)+sin(#{maLat}*3.14159265358979/180)*sin(aLat*3.14159265358979/180),30)))
		                        AS distance
		                        FROM area ar
		                    ) WHERE distance &lt;= 5   
						)
					)
			</if>
		</if>
		<!-- 1. 검색어 -->
        AND CASE WHEN #{searchKeyword} IS NULL THEN 1
                 WHEN pSubject LIKE CONCAT(CONCAT('%', #{searchKeyword}), '%') THEN 1
            ELSE 0 END = 1 
        <!-- 2. 관심 키워드 여부 -->
        AND CASE WHEN #{isKeyword} = '0' THEN 1
                 WHEN regexp_like(pSubject, k.keyword) THEN 1
            ELSE 0 END = 1
        <!-- 3. 차단 유저 게시물 안보기 -->
        AND CASE WHEN blocked.blockedId IS NULL THEN 1
                 WHEN not regexp_like(p.userId, blocked.blockedId) THEN 1
            ELSE 0 END = 1
		<!-- 4. 거래완료 제외한 리스트 : 없을때도 뭔가 나오긴했었다. -->
		AND pSoldDate IS NULL			
	</select>
	
	<!-- 중고거래 글 작성 -->
	<insert id="insertProduct" parameterType="com.sp.mango.product.Product">
		INSERT INTO product(pNum, pSubject, pStatus, pContent, pPrice, pHitCount,
         pRegDate, pUpdate_date, pSoldDate, pIsProposable, pLat, pLon, userId,
         areaNum, pcNum)
      	VALUES(#{pNum}, #{pSubject}, #{pStatus, jdbcType=VARCHAR}, #{pContent, jdbcType=VARCHAR}, #{pPrice},
         0, SYSDATE, SYSDATE, #{pSoldDate, jdbcType=VARCHAR},
         #{pIsProposable}, #{pLat, jdbcType=INTEGER}, #{pLon, jdbcType=INTEGER},
         #{userId}, #{areaNum}, #{pcNum})
	</insert>
	
	<!-- 중고거래 글 수정 -->
	<update id="updateProduct" parameterType="com.sp.mango.product.Product">
		UPDATE product SET 
			pSubject=#{pSubject}, pStatus=#{pStatus}, pContent=#{pContent, jdbcType=VARCHAR},
			pPrice=#{pPrice}, pIsProposable=#{pIsProposable}, pLat=#{pLat}, pLon=#{pLon}, 
			areaNum=#{areaNum}, pcNum=#{pcNum}			
		WHERE pNum = #{pNum}
	</update>
	
	<!-- 중고거래 판매날짜 업데이트 -->
	<update id="updateSoldDate" parameterType="com.sp.mango.product.Product">
		UPDATE product SET pSoldDate = SYSDATE WHERE pNum=#{pNum}
	</update>
	
	<!-- 중고거래 글 끌어올리기 : 날짜가 업데이트 됨 -->
	<update id="updateDate" parameterType="com.sp.mango.product.Product">
		UPDATE product SET pUpdate_date = SYSDATE, pUp = pUp+1
		WHERE pNum=#{pNum}
	</update>
	
	<!-- 중고거래 글 삭제 -->
	<delete id="deleteProduct" parameterType="Integer">
		DELETE FROM product WHERE pNum = #{pNum}
	</delete>
	
	<!-- 상품 카테고리 리스트 검색 -->
	<select id="listCategory" resultType="com.sp.mango.product.Product">
		SELECT pcNum, pcName
		FROM pCategory
	</select>
 
	<!-- 회원이 등록한 주소와 해당 주소가 속한 지역 검색 -->
	<select id="listMemberAddr" parameterType="String" resultType="com.sp.mango.product.MemberAddr">
		SELECT maNum, maZip, maAddr1, maAddr2, maLat, maLon, a.areaNum, a.area1, a.area2, a.area3, a.aLat, a.aLon 
		FROM memberAddr ma
		JOIN area a ON ma.areaNum = a.areaNum
		WHERE userId = #{userId}
	</select>

	<!-- 상품 리스트 (회원일시 지정 위치 기준 반경 5km내의 판매글) -->
	<select id="memberListProduct" parameterType="map" resultType="com.sp.mango.product.Product">
		SELECT * FROM (
    		SELECT ROWNUM rnum, tb.* FROM (
        	   SELECT p.pNum, pSubject, pPrice, TO_CHAR(pRegDate, 'YYYY-MM-DD') pRegDate,
		              TO_CHAR(pUpdate_date, 'YYYY-MM-DD HH:MI:SS') pUpdate_date, area3,
		              NVL(pWishCount, 0) pWishCount, pc.pcNum, m.userNickName, m.userImgSaveFileName, pContent
        		FROM product p
        		JOIN area a ON p.areaNum = a.areaNum
        		JOIN pCategory pc ON p.pcNum = pc.pcNum
        		JOIN member m ON p.userId = m.userId
        		LEFT OUTER JOIN (
            		SELECT pNum, COUNT(pWishNum) pWishCount FROM product_WishList
            		GROUP BY pNum
        		) c ON p.pNum = c.pNum
        		<!-- 관심 키워드 조건 -->
      		    LEFT OUTER JOIN (
					SELECT USERID,  LISTAGG(KEYWORD, '|')  WITHIN GROUP(ORDER BY USERID) AS KEYWORD
					FROM KEYWORD
					GROUP BY USERID
				)K ON K.USERID = #{userId} <!-- 접속 유저 ID -->
				<!-- 차단 유저 조건 -->
				LEFT OUTER JOIN (
					SELECT USERID, LISTAGG(TARGET_ID, '|')  WITHIN GROUP(ORDER BY USERID) AS BLOCKEDID
					FROM BLOCKEDUSER
					GROUP BY USERID
				)BLOCKED ON BLOCKED.USERID = #{userId} <!-- 접속 유저 ID -->
        		WHERE CASE WHEN #{maLat} = 0 AND #{maLon} = 0 THEN 1
		                   WHEN p.areaNum IN (
		                       SELECT areaNum
		                       FROM (
		                           SELECT * FROM (
		                               SELECT areaNum,
		                                   (6371*acos(ROUND(cos(#{maLat}*3.14159265358979/180)*cos(aLat*3.14159265358979/180)*cos(aLon*3.14159265358979/180
                              				-#{maLon}*3.14159265358979/180)+sin(#{maLat}*3.14159265358979/180)*sin(aLat*3.14159265358979/180),30)))
		                                   AS distance
		                                   FROM area ar
		                               ) WHERE distance &lt;= 5    
		                           )
		                       ) THEN 1
		              ELSE 0 END = 1
            	AND	CASE WHEN #{pcNum} = 0 THEN 1
		                 WHEN pc.pcNum = #{pcNum} THEN 1
		            ELSE 0 END = 1
		        <!-- 1. 검색어 -->
		        AND CASE WHEN #{searchKeyword} IS NULL THEN 1
		                 WHEN pSubject LIKE CONCAT(CONCAT('%', #{searchKeyword}), '%') THEN 1
		            ELSE 0 END = 1 
		        <!-- 2. 관심 키워드 여부 -->
		        AND CASE WHEN #{isKeyword} = '0' THEN 1
		                 WHEN regexp_like(pSubject, k.keyword) THEN 1
		            ELSE 0 END = 1
		        <!-- 3. 차단 유저 게시물 안보기 -->
		        AND CASE WHEN blocked.blockedId is null THEN 1
		                 WHEN not regexp_like(p.userId, blocked.blockedId) THEN 1
		            ELSE 0 END = 1
		        <!-- 4. 거래완료 제외한 리스트 -->
		        AND pSoldDate IS NULL 
        		ORDER BY pUpdate_date DESC
    		) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
		order by pUpdate_date DESC
	</select>
	
	<!-- 인기글 리스트 -->
	<select id="popularList" parameterType="map" resultType="com.sp.mango.product.Product">
		SELECT * FROM (
        	   SELECT p.pNum, pSubject, pPrice, TO_CHAR(pRegDate, 'YYYY-MM-DD') pRegDate,
		              TO_CHAR(pUpdate_date, 'YYYY-MM-DD HH:MI:SS') pUpdate_date, area3, pContent,
		              NVL(pWishCount, 0) pWishCount, pc.pcNum, m.userNickName, popularPoint, m.userImgSaveFileName,
		              RANK() OVER(ORDER BY popularPoint DESC) RANK
        		FROM product p
        		JOIN area a ON p.areaNum = a.areaNum
        		JOIN pCategory pc ON p.pcNum = pc.pcNum
        		JOIN member m ON p.userId = m.userId
        		LEFT OUTER JOIN (
            		SELECT pNum, COUNT(pWishNum) pWishCount FROM product_WishList
            		GROUP BY pNum
        		) c ON p.pNum = c.pNum
        		LEFT OUTER JOIN (
                    SELECT p.pNum, ((NVL(pWishCount, 0) * 2) +
                            (pHitCount * 0.1)) popularPoint
                    FROM product p
                    LEFT OUTER JOIN (
                                        SELECT pNum, COUNT(pWishNum) pWishCount FROM product_WishList
                                        GROUP BY pNum
                                    ) c ON p.pNum = c.pNum
                ) pop ON p.pNum = pop.pNum
        		WHERE popularPoint &gt;= 5 AND 
        			  CASE WHEN #{maLat} = 0 AND #{maLon} = 0 THEN 1
		                   WHEN p.areaNum IN (
		                       SELECT areaNum
		                       FROM (
		                           SELECT * FROM (
		                               SELECT areaNum,
		                                   (6371*acos(ROUND(cos(#{maLat}*3.14159265358979/180)*cos(aLat*3.14159265358979/180)*cos(aLon*3.14159265358979/180
                              				-#{maLon}*3.14159265358979/180)+sin(#{maLat}*3.14159265358979/180)*sin(aLat*3.14159265358979/180),30)))
		                                   AS distance
		                                   FROM area ar
		                               ) WHERE distance &lt;= 5    
		                           )
		                       ) THEN 1
		              ELSE 0 END = 1
            	AND	CASE WHEN #{pcNum} = 0 THEN 1
		                 WHEN pc.pcNum = #{pcNum} THEN 1
		            ELSE 0 END = 1
		      ) T1
		      WHERE T1.RANK &lt;= 6
	</select>
	
	<!-- 프로필 사진 가져오기 -->
	<select id="userProfile" parameterType="Integer" resultType="String">
		<!--  
		SELECT userImgSaveFileName
		FROM member
		WHERE userId = #{userId};
		-->
		SELECT userImgSaveFileName
		FROM member m
		JOIN product p ON m.userID = p.userId
		WHERE pNum = #{pNum}
	</select>
	
	<!-- 조회수 증가 --> 
 	<update id="updateHitCount" parameterType="Integer">
		UPDATE product SET pHitCount=pHitCount+1 WHERE pNum = #{pNum}
	</update>
 
	<!-- 특정 판매게시글이 받은 관심 개수 -->
	<select id="pWishCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(pWishNum) FROM product_WishList WHERE pNum = #{pNum}
	</select>
	
	<!-- 회원이 등록한 주소 개수 세기 -->
	<select id="memAddrCount" parameterType="String" resultType="Integer">
		SELECT COUNT(maAddr1) FROM memberAddr WHERE userId = #{userId}
	</select>

	


	<!-- 글보기 -->
	<select id="readProduct" parameterType="Integer" resultType="com.sp.mango.product.Product">
		SELECT p.pNum, pSubject, pStatus, pContent, pPrice, pHitCount, TO_CHAR(pRegDate, 'YYYY-MM-DD HH:MI:SS') pRegDate,
		        TO_CHAR(pUpdate_date, 'YYYY-MM-DD') pUpdate_date, pSoldDate, pIsProposable, area1, area2, area3,
		        NVL(pWishCount, 0) pWishCount, pc.pcNum, pc.pcName, m.userNickName, p.userId, pUp, p.areaNum, m.userImgSaveFileName,
		        (36.5 + (0.1* NVL(manner.mannerStar, 0)) + (0.1* NVL(manner.productStar, 0)) - NVL(manner.minusDeg, 0)) AS manner
		FROM product p
		JOIN area a ON p.areaNum = a.areaNum
		JOIN pCategory pc ON p.pcNum = pc.pcNum
		JOIN member m ON p.userId = m.userId
		JOIN mannerProfile manner ON p.userId = manner.userId
		LEFT OUTER JOIN (
		    SELECT pNum, COUNT(pWishNum) pWishCount FROM product_WishList
		    GROUP BY pNum
		) c ON p.pNum = c.pNum
		WHERE p.pNum = #{pNum}
	</select>
	
	
	
	<!-- 게시글 관심 추가 -->
	<insert id="insertProductWish" parameterType="map">
		INSERT INTO product_WishList(pWishNum, pwRegDate, userId, pNum) 
		VALUES (product_WishList_seq.NEXTVAL, SYSDATE, #{userId}, #{pNum})
	</insert>
	
	<!-- 게시글 관심 삭제 -->
	<delete id="deleteProductWish" parameterType="map">
		DELETE FROM product_WishList WHERE pNum = #{pNum} AND userId = #{userId}
	</delete>

	<!-- 게시글 관심 여부 -->
	<select id="userProductWished" parameterType="map" resultType="com.sp.mango.product.Product">
		SELECT pNum, userId FROM product_WishList WHERE pNum = #{pNum} AND userId = #{userId}
	</select>

	<!-- 게시글 관심 개수 -->
	<select id="productWishCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM product_WishList WHERE pNum = #{pNum}
	</select>


	<!-- 신고항목 리스트 -->
	<select id="listPreport" resultType="com.sp.mango.product.ProductReport">
		SELECT * FROM reportProduct_Reason
	</select>

	<!-- 신고 등록 -->
	<insert id="insertPreport" parameterType="com.sp.mango.product.ProductReport">
		INSERT INTO reportProduct(repPrdNum, rpReasonNum, repPrdContent, repPrdRegDate, 
									repPrdChecked, userId, pNum)
		VALUES(reportProduct_seq.NEXTVAL, #{rpReasonNum}, #{repPrdContent, jdbcType=VARCHAR},
				 SYSDATE, 'F', #{userId}, #{pNum})
	</insert>
	
	<!-- 끌올가능 날짜 구하기 -->
	<select id="pUpOkDate" parameterType="Integer" resultType="String">
		SELECT (pRegDate + 3) pUpOkDate FROM product WHERE pNum = #{pNum}
	</select>

	<!-- 거래 쪽지 보내기 -->
	<insert id="sendMsg" parameterType="map">
   		INSERT INTO note (noteNum, sendId, receiveId, noteContent, noteRegDate, isSendDelete, isRecDelete)
			VALUES (note_seq.NEXTVAL, #{sendId}, #{receiveId}, #{noteContent}, SYSDATE, 'F','F')
   	</insert>
   	
   	<!-- 리뷰 등록 -->
	<insert id="insertPreview" parameterType="com.sp.mango.product.Preview">
		INSERT INTO pReview (pNum, buyerId, sellerId, prContent, mannerStar, prdStar)
		VALUES (#{pNum}, #{buyerId}, #{sellerId}, #{prContent, jdbcType=VARCHAR}, 
				#{mannerStar}, #{prdStar})
	</insert>

	<!-- 리뷰 요청을 위한 받은 쪽지 리스트 -->
	<select id="receiveNoteList" parameterType="String" resultType="com.sp.mango.product.Product">
		SELECT DISTINCT sendId, m.userNickName, isSendDelete
		FROM note n
		JOIN member m ON n.sendId = m.userId
		WHERE receiveId = #{userId}
		    AND m.userId NOT IN (
		        SELECT target_Id FROM blockeduser
		        WHERE userId = #{userId}
		        )
		    AND NOT (
		        (isSendDelete != 'F' AND noteReadDate IS NULL)
		        OR (isRecDelete != 'F')
		        )
		ORDER BY userNickName
	</select>
	
	<!-- 리뷰요청 : 가계부 테이블 등록 -->
	<insert id="insertMyAccount1" parameterType="com.sp.mango.product.Product">
         INSERT INTO myAccount (MYACNUM, USERID, TARGET_ID, INCOME, EXPENSES, PNUM)
         VALUES(myaccount_seq.NEXTVAL, #{userId}, #{target_id}, #{income}, 0, #{pNum})
	</insert>
	
	<insert id="insertMyAccount2" parameterType="com.sp.mango.product.Product">
         INSERT INTO myAccount (MYACNUM, USERID, TARGET_ID, INCOME, EXPENSES, PNUM)
         VALUES(myaccount_seq.NEXTVAL, #{target_id}, #{userId}, 0, #{income}, #{pNum})
	</insert>

	<!-- 거래완료로 변경 --> 
 	<update id="updatePstatus" parameterType="Integer">
		UPDATE product SET pStatus='거래완료' WHERE pNum = #{pNum}
	</update>
	
</mapper>